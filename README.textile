h1. Introduction

JSON++ is a light-weight JSON parser written in C++.

h1. Contributors

http://github.com/hjiang
http://github.com/elanthis
http://github.com/r-lyeh

h1. Why another JSON parser?

Perhaps because web service clients are usually written in dynamic
languages these days, none of the existing C++ JSON parsers suite my
needs very well, so I wrote one to used in another project. My goals
for JSON++ were:
* Efficient in both memory and speed.
* No third party dependencies. JSON++ only depends on the standard C++ library.
* Cross platform.
* Robust.
* Small and convenient API. Most of the time, you only need to call one function and two function templates.
* Easy to integrate. JSON++ only has one source file and one header file. Just compile the source file and link with your program.
* Option for strict parsing (default is permissive). See jsonxx::settings enum.
* JSONx support: JSON to XML transform. See http://goo.gl/I3cxs for details.
* JXML support: JSON to JXML transform. See https://github.com/r-lyeh/JXML for details.

h1. Usage

The following snippet is from one of the unit tests. It's quite self-descriptive.

<pre>
<code>
string teststr(
        "{"
        "  \"foo\" : 1,"
        "  \"bar\" : false,"
        "  \"person\" : {\"name\" : \"GWB\", \"age\" : 60,},"
        "  \"data\": [\"abcd\", 42],"
        "}"
               );
istringstream input(teststr);
Object o;
assert(o << teststr);
assert(Object::parse(input,o));               // Same than above
assert(1 == o.get<Number>("foo"));
assert(o.has<Boolean>("bar"));
assert(o.has<Object>("person"));
assert(o.get<Object>("person").has<Number>("age"));
assert(o.has<Array>("data"));
assert(o.get<Array>("data").get<Number>(1) == 42);
assert(o.get<Array>("data").get<String>(0) == "abcd");
assert(!o.has<Number>("data"));
cout << o.xml(jsonx) << endl;                 // XML transformation: JSONx schema
cout << o.xml(jxml) << endl;                  // XML transformation: JXML schema
</code>
</pre>
