h1. Introduction

JSON++ is a light-weight JSON parser, writer and reader written in C++.
JSON++ can also convert JSON documents into lossless XML documents.

h1. Contributors

http://github.com/hjiang
http://github.com/elanthis
http://github.com/r-lyeh

h1. Why another JSON parser?

Perhaps because web service clients are usually written in dynamic languages these days, none of the existing C++ JSON parsers suit my needs very well, so I wrote one that I used in another project. My goals for JSON++ are:

* Efficient in both memory and speed.
* No third party dependencies. JSON++ only depends on the standard C++ library.
* Cross platform.
* Robust.
* Small and convenient API. Most of the time, you only need to call one function and two function templates.
* Easy to integrate. JSON++ only has one source file and one header file. Just compile the source file and link with your program.
* Option for strict parsing (default is permissive). See jsonxx::settings enum.
* JSONx support: JSON to XML transform. See http://goo.gl/I3cxs for details.
* JXML support: JSON to JXML transform. See https://github.com/r-lyeh/JXML for details.
* JXMLex support: JSON to JXMLex transform. See https://github.com/r-lyeh/JXMLex for details.

h1. Missing

* Custom JSON comments (/**/ //) when permissive parsing is enabled.

h1. Usage

The following snippets are from one of the unit tests. They are quite self-descriptive.

<pre>
<code>

using namespace std;
using namespace jsonxx;

string teststr(
        "{"
        "  \"foo\" : 1,"
        "  \"bar\" : false,"
        "  \"person\" : {\"name\" : \"GWB\", \"age\" : 60,},"
        "  \"data\": [\"abcd\", 42],"
        "}"
               );

// parse stream
Object o;
assert(o.parse(teststr));

// same than above
istringstream input(teststr);
assert(Object::parse(input,o));

// validation. checking for json types and values as well
assert(1 == o.get<Number>("foo"));
assert(o.has<Boolean>("bar"));
assert(o.has<Object>("person"));
assert(o.get<Object>("person").has<Number>("age"));
assert(o.has<Array>("data"));
assert(o.get<Array>("data").get<Number>(1) == 42);
assert(o.get<Array>("data").get<String>(0) == "abcd");
assert(!o.has<Number>("data"));
cout << o.json() << endl;                     // JSON output
cout << o.xml(JSONx) << endl;                 // XML conversion: JSONx subtype
cout << o.xml(JXML) << endl;                  // XML conversion: JXML subtype
cout << o.xml(JXMLex) << endl;                // XML conversion: JXMLex subtype
</code>
</pre>

<pre>
<code>
// Generate JSON document dinamically
Array a;
a << 123;
a << "hello world";
a << 3.1415;
a << 99.95f;
a << 'h';
a << Object("key", "value");
cout << a.json() << endl;
</code>
</pre>
